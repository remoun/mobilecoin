// Copyright (c) 2018-2022 The MobileCoin Foundation

mod autogenerated_code {
    // Expose proto data types from included third-party/external proto files.
    pub use mc_api::{blockchain, external};
    pub use protobuf::well_known_types::empty;

    // Include the auto-generated code.
    include!(concat!(env!("OUT_DIR"), "/protos-auto-gen/mod.rs"));

    // These are needed for tests
    impl Eq for report::Report {}
    impl Eq for report::ReportResponse {}
}

pub use autogenerated_code::*;

use mc_fog_report_types::{Report, ReportResponse};

impl From<report::Report> for Report {
    fn from(mut src: report::Report) -> Report {
        Report {
            fog_report_id: src.take_fog_report_id(),
            report: (&src.take_report()).into(),
            pubkey_expiry: src.pubkey_expiry,
        }
    }
}

impl From<Report> for report::Report {
    fn from(src: Report) -> report::Report {
        let mut result = report::Report::new();
        result.set_fog_report_id(src.fog_report_id);
        result.set_report((&src.report).into());
        result.set_pubkey_expiry(src.pubkey_expiry);
        result
    }
}

impl From<report::ReportResponse> for ReportResponse {
    fn from(src: report::ReportResponse) -> Self {
        Self {
            // Note: this is out of order because chain is a borrow, but the
            //       iter below is a partial move.
            chain: src.chain().into(),
            reports: src.reports.into_iter().map(|x| x.into()).collect(),
            signature: src.signature,
        }
    }
}

impl From<ReportResponse> for report::ReportResponse {
    fn from(src: ReportResponse) -> Self {
        let mut result = report::ReportResponse::new();
        result.set_signature(src.signature);
        result.set_chain(src.chain.into());
        result.set_reports(src.reports.into_iter().map(|x| x.into()).collect());
        result
    }
}
